{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "transferDeadline",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "new_ticketPrice",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "old_ticketPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "changerAddress",
          "type": "address"
        }
      ],
      "name": "ticketPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "new_transferDeadline",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "old_transferDeadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "changerAddress",
          "type": "address"
        }
      ],
      "name": "transferDeadlineChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_ADMIN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_ticketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_transferDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "reserved",
          "type": "bool"
        }
      ],
      "name": "buyTicket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "reserved",
          "type": "bool"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_ticketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_transferDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketPrice",
          "type": "uint256"
        }
      ],
      "name": "set_ticketPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transferDeadline",
          "type": "uint256"
        }
      ],
      "name": "set_transferDeadline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe802f6c40c56564621bc568da222fbf3e51cfe4d63c752a8c1a76b079a770b62",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "3488076",
    "logsBloom": "0x
    "blockHash": "0x9f25ac77c24a0fbad206500bb2495b415d10d0db3840855b717492b3e0805028",
    "transactionHash": "0xe802f6c40c56564621bc568da222fbf3e51cfe4d63c752a8c1a76b079a770b62",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xe802f6c40c56564621bc568da222fbf3e51cfe4d63c752a8c1a76b079a770b62",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca025096",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9f25ac77c24a0fbad206500bb2495b415d10d0db3840855b717492b3e0805028"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xe802f6c40c56564621bc568da222fbf3e51cfe4d63c752a8c1a76b079a770b62",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xcb45514fc0fe5d5f647eb2d722a16b3a79b15621154705e599c288dbf0239077",
          "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
        "logIndex": 1,
        "blockHash": "0x9f25ac77c24a0fbad206500bb2495b415d10d0db3840855b717492b3e0805028"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xe802f6c40c56564621bc568da222fbf3e51cfe4d63c752a8c1a76b079a770b62",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xfcf6fe54a7e3d0e1e9928c58aaf4a9a2b757e783323259a757c7486bb6f00357",
          "0x0000000000000000000000000000000000000000000000000000017e6ee6789e",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
        "logIndex": 2,
        "blockHash": "0x9f25ac77c24a0fbad206500bb2495b415d10d0db3840855b717492b3e0805028"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xe802f6c40c56564621bc568da222fbf3e51cfe4d63c752a8c1a76b079a770b62",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x9f25ac77c24a0fbad206500bb2495b415d10d0db3840855b717492b3e0805028"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "3488076",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1000000000000000000",
    1642538104990
  ],
  "solcInputHash": "e9eab1cc2d17cb78c0cfc66529a5f0d3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferDeadline\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"new_ticketPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"old_ticketPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changerAddress\",\"type\":\"address\"}],\"name\":\"ticketPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"new_transferDeadline\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"old_transferDeadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changerAddress\",\"type\":\"address\"}],\"name\":\"transferDeadlineChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"reserved\",\"type\":\"bool\"}],\"name\":\"buyTicket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"reserved\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_transferDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"}],\"name\":\"set_ticketPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transferDeadline\",\"type\":\"uint256\"}],\"name\":\"set_transferDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"buyTicket(bool)\":{\"params\":{\"reserved\":\"Bypass the payment when buying, msg.sender needs ROLE_ADMIN.\"}},\"deposit(bool)\":{\"params\":{\"reserved\":\"Bypass the payment when buying.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"events\":{\"ticketPriceChanged(uint256,uint256,address)\":{\"notice\":\"Emitted when _ticketPrice is set.\"},\"transferDeadlineChanged(uint256,uint256,address)\":{\"notice\":\"Emitted when _transferDeadline is set.\"}},\"kind\":\"user\",\"methods\":{\"ROLE_ADMIN()\":{\"notice\":\"Admin tasks : - buy ticket without depositing ether (paying) - change _ticketPrice - change _transferDeadline\"},\"_ticketPrice()\":{\"notice\":\"Price of a ticket\"},\"_transferDeadline()\":{\"notice\":\"Transferring ticket after this date is restricted to admin.\"},\"buyTicket(bool)\":{\"notice\":\"Function to transfer Ether from this contract to address from input.\"},\"deposit(bool)\":{\"notice\":\"Function to deposit Ether into this contract.\"},\"get_ticketPrice()\":{\"notice\":\"Returns _ticketPrice.\"},\"get_transferDeadline()\":{\"notice\":\"Returns _transferDeadline.\"},\"set_ticketPrice(uint256)\":{\"notice\":\"Sets _ticketPrice.Callable only by high roles\"},\"set_transferDeadline(uint256)\":{\"notice\":\"Sets _transferDeadline.Callable only by high roles\"},\"supportsInterface(bytes4)\":{\"notice\":\"https://forum.openzeppelin.com/t/derived-contract-must-override-function-supportsinterface/6315/2override supportsInterface from ERC721 and AccessControl\"},\"transfer(address,uint256)\":{\"notice\":\"Function to transfer Ether from this contract to address from input. Callable only by high roles\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TicketOffice1.sol\":\"TicketOffice1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9a137b317dc4806805f2259686186c0c053c32d80fe9c15ecdbf2eb1cf52849\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/TicketOffice1.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract TicketOffice1 is ERC721, AccessControl {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIds;\\n\\n    /// @notice Admin tasks :\\n    /// - buy ticket without depositing ether (paying)\\n    /// - change _ticketPrice\\n    /// - change _transferDeadline\\n    bytes32 public constant ROLE_ADMIN = keccak256(\\\"ROLE_ADMIN\\\");\\n\\n    /// @notice Price of a ticket\\n    uint256 public _ticketPrice;\\n    /// @notice Transferring ticket after this date is restricted to admin.\\n    uint256 public _transferDeadline;\\n    /// @notice Emitted when _transferDeadline is set.\\n    event transferDeadlineChanged(\\n        uint256 indexed new_transferDeadline,\\n        uint256 indexed old_transferDeadline,\\n        address changerAddress\\n    );\\n    /// @notice Emitted when _ticketPrice is set.\\n    event ticketPriceChanged(\\n        uint256 indexed new_ticketPrice,\\n        uint256 indexed old_ticketPrice,\\n        address changerAddress\\n    );\\n\\n    /// @notice Returns _transferDeadline.\\n    function get_transferDeadline() public view returns (uint256) {\\n        return _transferDeadline;\\n    }\\n\\n    /// @notice Returns _ticketPrice.\\n    function get_ticketPrice() public view returns (uint256) {\\n        return _ticketPrice;\\n    }\\n\\n    /// @notice Sets _ticketPrice.\\n    /// @notice Callable only by high roles\\n    function set_ticketPrice(uint256 ticketPrice) public {\\n        uint256 old_ticketPrice = _ticketPrice;\\n        _ticketPrice = ticketPrice;\\n        emit ticketPriceChanged(_ticketPrice, old_ticketPrice, msg.sender);\\n    }\\n\\n    /// @notice Sets _transferDeadline.\\n    /// @notice Callable only by high roles\\n    function set_transferDeadline(uint256 transferDeadline) public {\\n        require(hasRole(ROLE_ADMIN, msg.sender), \\\"ROLE_ADMIN needed.\\\");\\n        uint256 old_transferDeadline = _transferDeadline;\\n        _transferDeadline = transferDeadline;\\n        emit transferDeadlineChanged(\\n            _transferDeadline,\\n            old_transferDeadline,\\n            msg.sender\\n        );\\n    }\\n\\n    constructor(uint256 ticketPrice, uint256 transferDeadline)\\n        payable\\n        ERC721(\\\"TicketOffice1\\\", \\\"TO1\\\")\\n    {\\n        _grantRole(ROLE_ADMIN, msg.sender);\\n        set_ticketPrice(ticketPrice);\\n        set_transferDeadline(transferDeadline);\\n        buyTicket(true);\\n    }\\n\\n    /// @notice Function to transfer Ether from this contract to address from input.\\n    /// @param reserved Bypass the payment when buying, msg.sender needs ROLE_ADMIN.\\n    function buyTicket(bool reserved) public payable returns (uint256) {\\n        deposit(reserved);\\n        _tokenIds.increment();\\n        uint256 newItemId = _tokenIds.current();\\n        _mint(msg.sender, newItemId);\\n        return newItemId;\\n    }\\n\\n    /// @notice Function to transfer Ether from this contract to address from input.\\n    /// Callable only by high roles\\n    function transfer(address payable to, uint256 amount) public {\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Failed to send Ether.\\\");\\n    }\\n\\n    /// @notice Function to deposit Ether into this contract.\\n    /// @param reserved Bypass the payment when buying.\\n    function deposit(bool reserved) public payable {\\n        if (reserved) {\\n            require(hasRole(ROLE_ADMIN, msg.sender), \\\"ROLE_ADMIN needed.\\\");\\n        } else {\\n            require(msg.value >= _ticketPrice, \\\"Not enough money sent.\\\");\\n        }\\n    }\\n\\n    /// @notice https://forum.openzeppelin.com/t/derived-contract-must-override-function-supportsinterface/6315/2\\n    /// @notice override supportsInterface from ERC721 and AccessControl\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721, AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x19f098342667b39d23da3737f994fd94d8bf2ecd107c002c910f5040555f6d60\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x6080604052604051620046083803806200460883398181016040528101906200002991906200081e565b6040518060400160405280600d81526020017f5469636b65744f666669636531000000000000000000000000000000000000008152506040518060400160405280600381526020017f544f3100000000000000000000000000000000000000000000000000000000008152508160009080519060200190620000ad92919062000757565b508060019080519060200190620000c692919062000757565b505050620000fb7f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca025096336200013860201b60201c565b6200010c826200022a60201b60201c565b6200011d816200027960201b60201c565b6200012f60016200033c60201b60201c565b50505062000baf565b6200014a82826200039c60201b60201c565b620002265760016006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001cb6200040760201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000600854905081600881905550806008547fcb45514fc0fe5d5f647eb2d722a16b3a79b15621154705e599c288dbf0239077336040516200026d91906200090c565b60405180910390a35050565b620002ab7f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca025096336200039c60201b60201c565b620002ed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002e4906200094b565b60405180910390fd5b6000600954905081600981905550806009547ffcf6fe54a7e3d0e1e9928c58aaf4a9a2b757e783323259a757c7486bb6f00357336040516200033091906200090c565b60405180910390a35050565b60006200034f826200040f60201b60201c565b620003666007620004dc60201b620011d81760201c565b60006200037f6007620004f260201b620011ee1760201c565b90506200039333826200050060201b60201c565b80915050919050565b60006006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b80156200049057620004487f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca025096336200039c60201b60201c565b6200048a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000481906200094b565b60405180910390fd5b620004d9565b600854341015620004d8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004cf906200096d565b60405180910390fd5b5b50565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000573576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200056a906200098f565b60405180910390fd5b6200058481620006e660201b60201c565b15620005c7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005be9062000929565b60405180910390fd5b620005db600083836200075260201b60201c565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546200062d9190620009c2565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b828054620007659062000a5d565b90600052602060002090601f016020900481019282620007895760008555620007d5565b82601f10620007a457805160ff1916838001178555620007d5565b82800160010185558215620007d5579182015b82811115620007d4578251825591602001919060010190620007b7565b5b509050620007e49190620007e8565b5090565b5b8082111562000803576000816000905550600101620007e9565b5090565b600081519050620008188162000b95565b92915050565b600080604083850312156200083257600080fd5b6000620008428582860162000807565b9250506020620008558582860162000807565b9150509250929050565b6200086a8162000a1f565b82525050565b60006200087f601c83620009b1565b91506200088c8262000af1565b602082019050919050565b6000620008a6601283620009b1565b9150620008b38262000b1a565b602082019050919050565b6000620008cd601683620009b1565b9150620008da8262000b43565b602082019050919050565b6000620008f4602083620009b1565b9150620009018262000b6c565b602082019050919050565b60006020820190506200092360008301846200085f565b92915050565b60006020820190508181036000830152620009448162000870565b9050919050565b60006020820190508181036000830152620009668162000897565b9050919050565b600060208201905081810360008301526200098881620008be565b9050919050565b60006020820190508181036000830152620009aa81620008e5565b9050919050565b600082825260208201905092915050565b6000620009cf8262000a53565b9150620009dc8362000a53565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000a145762000a1362000a93565b5b828201905092915050565b600062000a2c8262000a33565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000600282049050600182168062000a7657607f821691505b6020821081141562000a8d5762000a8c62000ac2565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f524f4c455f41444d494e206e65656465642e0000000000000000000000000000600082015250565b7f4e6f7420656e6f756768206d6f6e65792073656e742e00000000000000000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b62000ba08162000a53565b811462000bac57600080fd5b50565b613a498062000bbf6000396000f3fe6080604052600436106101c25760003560e01c80637e40be66116100f7578063b88d4fde11610095578063d391014b11610064578063d391014b1461065a578063d459643b14610685578063d547741f146106b0578063e985e9c5146106d9576101c2565b8063b88d4fde146105ad578063c57273c2146105d6578063c7d959a8146105f2578063c87b56dd1461061d576101c2565b806395d89b41116100d157806395d89b4114610505578063a217fddf14610530578063a22cb4651461055b578063a9059cbb14610584576101c2565b80637e40be661461047457806391d148541461049f578063940a3f88146104dc576101c2565b8063248a9ca31161016457806338a80b7f1161013e57806338a80b7f146103a657806342842e0e146103d15780636352211e146103fa57806370a0823114610437576101c2565b8063248a9ca3146103175780632f2ff15d1461035457806336568abe1461037d576101c2565b8063081812fc116101a0578063081812fc1461025f578063095ea7b31461029c578063143858cc146102c557806323b872dd146102ee576101c2565b806301ffc9a7146101c7578063061c0d761461020457806306fdde0314610234575b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e991906127f9565b610716565b6040516101fb9190612d2f565b60405180910390f35b61021e6004803603810190610219919061276b565b610728565b60405161022b9190612fe7565b60405180910390f35b34801561024057600080fd5b5061024961075e565b6040516102569190612d65565b60405180910390f35b34801561026b57600080fd5b506102866004803603810190610281919061284b565b6107f0565b6040516102939190612cc8565b60405180910390f35b3480156102a857600080fd5b506102c360048036038101906102be919061272f565b610875565b005b3480156102d157600080fd5b506102ec60048036038101906102e7919061284b565b61098d565b005b3480156102fa57600080fd5b5061031560048036038101906103109190612629565b6109da565b005b34801561032357600080fd5b5061033e60048036038101906103399190612794565b610a3a565b60405161034b9190612d4a565b60405180910390f35b34801561036057600080fd5b5061037b600480360381019061037691906127bd565b610a5a565b005b34801561038957600080fd5b506103a4600480360381019061039f91906127bd565b610a83565b005b3480156103b257600080fd5b506103bb610b06565b6040516103c89190612fe7565b60405180910390f35b3480156103dd57600080fd5b506103f860048036038101906103f39190612629565b610b10565b005b34801561040657600080fd5b50610421600480360381019061041c919061284b565b610b30565b60405161042e9190612cc8565b60405180910390f35b34801561044357600080fd5b5061045e60048036038101906104599190612588565b610be2565b60405161046b9190612fe7565b60405180910390f35b34801561048057600080fd5b50610489610c9a565b6040516104969190612fe7565b60405180910390f35b3480156104ab57600080fd5b506104c660048036038101906104c191906127bd565b610ca0565b6040516104d39190612d2f565b60405180910390f35b3480156104e857600080fd5b5061050360048036038101906104fe919061284b565b610d0b565b005b34801561051157600080fd5b5061051a610dc1565b6040516105279190612d65565b60405180910390f35b34801561053c57600080fd5b50610545610e53565b6040516105529190612d4a565b60405180910390f35b34801561056757600080fd5b50610582600480360381019061057d91906126f3565b610e5a565b005b34801561059057600080fd5b506105ab60048036038101906105a691906125b1565b610e70565b005b3480156105b957600080fd5b506105d460048036038101906105cf9190612678565b610f21565b005b6105f060048036038101906105eb919061276b565b610f83565b005b3480156105fe57600080fd5b50610607611040565b6040516106149190612fe7565b60405180910390f35b34801561062957600080fd5b50610644600480360381019061063f919061284b565b61104a565b6040516106519190612d65565b60405180910390f35b34801561066657600080fd5b5061066f6110f1565b60405161067c9190612d4a565b60405180910390f35b34801561069157600080fd5b5061069a611115565b6040516106a79190612fe7565b60405180910390f35b3480156106bc57600080fd5b506106d760048036038101906106d291906127bd565b61111b565b005b3480156106e557600080fd5b5061070060048036038101906106fb91906125ed565b611144565b60405161070d9190612d2f565b60405180910390f35b6000610721826111fc565b9050919050565b600061073382610f83565b61073d60076111d8565b600061074960076111ee565b90506107553382611276565b80915050919050565b60606000805461076d906132b7565b80601f0160208091040260200160405190810160405280929190818152602001828054610799906132b7565b80156107e65780601f106107bb576101008083540402835291602001916107e6565b820191906000526020600020905b8154815290600101906020018083116107c957829003601f168201915b5050505050905090565b60006107fb82611444565b61083a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083190612f07565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061088082610b30565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e890612f67565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166109106114b0565b73ffffffffffffffffffffffffffffffffffffffff16148061093f575061093e816109396114b0565b611144565b5b61097e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097590612e67565b60405180910390fd5b61098883836114b8565b505050565b6000600854905081600881905550806008547fcb45514fc0fe5d5f647eb2d722a16b3a79b15621154705e599c288dbf0239077336040516109ce9190612cc8565b60405180910390a35050565b6109eb6109e56114b0565b82611571565b610a2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2190612f87565b60405180910390fd5b610a3583838361164f565b505050565b600060066000838152602001908152602001600020600101549050919050565b610a6382610a3a565b610a7481610a6f6114b0565b6118ab565b610a7e8383611948565b505050565b610a8b6114b0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610af8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aef90612fc7565b60405180910390fd5b610b028282611a29565b5050565b6000600854905090565b610b2b83838360405180602001604052806000815250610f21565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610bd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd090612ea7565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4a90612e87565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60085481565b60006006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610d357f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca02509633610ca0565b610d74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6b90612de7565b60405180910390fd5b6000600954905081600981905550806009547ffcf6fe54a7e3d0e1e9928c58aaf4a9a2b757e783323259a757c7486bb6f0035733604051610db59190612cc8565b60405180910390a35050565b606060018054610dd0906132b7565b80601f0160208091040260200160405190810160405280929190818152602001828054610dfc906132b7565b8015610e495780601f10610e1e57610100808354040283529160200191610e49565b820191906000526020600020905b815481529060010190602001808311610e2c57829003601f168201915b5050505050905090565b6000801b81565b610e6c610e656114b0565b8383611b0b565b5050565b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610e9690612c79565b60006040518083038185875af1925050503d8060008114610ed3576040519150601f19603f3d011682016040523d82523d6000602084013e610ed8565b606091505b5050905080610f1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1390612fa7565b60405180910390fd5b505050565b610f32610f2c6114b0565b83611571565b610f71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6890612f87565b60405180910390fd5b610f7d84848484611c78565b50505050565b8015610ff757610fb37f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca02509633610ca0565b610ff2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe990612de7565b60405180910390fd5b61103d565b60085434101561103c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103390612ec7565b60405180910390fd5b5b50565b6000600954905090565b606061105582611444565b611094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108b90612f47565b60405180910390fd5b600061109e611cd4565b905060008151116110be57604051806020016040528060008152506110e9565b806110c884611ceb565b6040516020016110d9929190612c55565b6040516020818303038152906040525b915050919050565b7f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca02509681565b60095481565b61112482610a3a565b611135816111306114b0565b6118ab565b61113f8383611a29565b505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6001816000016000828254019250508190555050565b600081600001549050919050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061126f575061126e82611e98565b5b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156112e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112dd90612ee7565b60405180910390fd5b6112ef81611444565b1561132f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132690612dc7565b60405180910390fd5b61133b60008383611f7a565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461138b91906130a6565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661152b83610b30565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061157c82611444565b6115bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b290612e47565b60405180910390fd5b60006115c683610b30565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061163557508373ffffffffffffffffffffffffffffffffffffffff1661161d846107f0565b73ffffffffffffffffffffffffffffffffffffffff16145b8061164657506116458185611144565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661166f82610b30565b73ffffffffffffffffffffffffffffffffffffffff16146116c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116bc90612f27565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172c90612e07565b60405180910390fd5b611740838383611f7a565b61174b6000826114b8565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461179b9190613187565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117f291906130a6565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6118b58282610ca0565b611944576118da8173ffffffffffffffffffffffffffffffffffffffff166014611f7f565b6118e88360001c6020611f7f565b6040516020016118f9929190612c8e565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193b9190612d65565b60405180910390fd5b5050565b6119528282610ca0565b611a255760016006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506119ca6114b0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611a338282610ca0565b15611b075760006006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611aac6114b0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611b7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7190612e27565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611c6b9190612d2f565b60405180910390a3505050565b611c8384848461164f565b611c8f84848484612279565b611cce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc590612da7565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000821415611d33576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611e93565b600082905060005b60008214611d65578080611d4e9061331a565b915050600a82611d5e91906130fc565b9150611d3b565b60008167ffffffffffffffff811115611da7577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611dd95781602001600182028036833780820191505090505b5090505b60008514611e8c57600182611df29190613187565b9150600a85611e019190613363565b6030611e0d91906130a6565b60f81b818381518110611e49577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611e8591906130fc565b9450611ddd565b8093505050505b919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611f6357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611f735750611f7282612410565b5b9050919050565b505050565b606060006002836002611f92919061312d565b611f9c91906130a6565b67ffffffffffffffff811115611fdb577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561200d5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061206b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106120f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612135919061312d565b61213f91906130a6565b90505b600181111561222b577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106121a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8282815181106121e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806122249061328d565b9050612142565b506000841461226f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226690612d87565b60405180910390fd5b8091505092915050565b600061229a8473ffffffffffffffffffffffffffffffffffffffff1661247a565b15612403578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026122c36114b0565b8786866040518563ffffffff1660e01b81526004016122e59493929190612ce3565b602060405180830381600087803b1580156122ff57600080fd5b505af192505050801561233057506040513d601f19601f8201168201806040525081019061232d9190612822565b60015b6123b3573d8060008114612360576040519150601f19603f3d011682016040523d82523d6000602084013e612365565b606091505b506000815114156123ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a290612da7565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612408565b600190505b949350505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080823b905060008111915050919050565b60006124a061249b84613027565b613002565b9050828152602081018484840111156124b857600080fd5b6124c384828561324b565b509392505050565b6000813590506124da81613989565b92915050565b6000813590506124ef816139a0565b92915050565b600081359050612504816139b7565b92915050565b600081359050612519816139ce565b92915050565b60008135905061252e816139e5565b92915050565b600081519050612543816139e5565b92915050565b600082601f83011261255a57600080fd5b813561256a84826020860161248d565b91505092915050565b600081359050612582816139fc565b92915050565b60006020828403121561259a57600080fd5b60006125a8848285016124cb565b91505092915050565b600080604083850312156125c457600080fd5b60006125d2858286016124e0565b92505060206125e385828601612573565b9150509250929050565b6000806040838503121561260057600080fd5b600061260e858286016124cb565b925050602061261f858286016124cb565b9150509250929050565b60008060006060848603121561263e57600080fd5b600061264c868287016124cb565b935050602061265d868287016124cb565b925050604061266e86828701612573565b9150509250925092565b6000806000806080858703121561268e57600080fd5b600061269c878288016124cb565b94505060206126ad878288016124cb565b93505060406126be87828801612573565b925050606085013567ffffffffffffffff8111156126db57600080fd5b6126e787828801612549565b91505092959194509250565b6000806040838503121561270657600080fd5b6000612714858286016124cb565b9250506020612725858286016124f5565b9150509250929050565b6000806040838503121561274257600080fd5b6000612750858286016124cb565b925050602061276185828601612573565b9150509250929050565b60006020828403121561277d57600080fd5b600061278b848285016124f5565b91505092915050565b6000602082840312156127a657600080fd5b60006127b48482850161250a565b91505092915050565b600080604083850312156127d057600080fd5b60006127de8582860161250a565b92505060206127ef858286016124cb565b9150509250929050565b60006020828403121561280b57600080fd5b60006128198482850161251f565b91505092915050565b60006020828403121561283457600080fd5b600061284284828501612534565b91505092915050565b60006020828403121561285d57600080fd5b600061286b84828501612573565b91505092915050565b61287d816131bb565b82525050565b61288c816131df565b82525050565b61289b816131eb565b82525050565b60006128ac82613058565b6128b6818561306e565b93506128c681856020860161325a565b6128cf81613450565b840191505092915050565b60006128e582613063565b6128ef818561308a565b93506128ff81856020860161325a565b61290881613450565b840191505092915050565b600061291e82613063565b612928818561309b565b935061293881856020860161325a565b80840191505092915050565b600061295160208361308a565b915061295c82613461565b602082019050919050565b600061297460328361308a565b915061297f8261348a565b604082019050919050565b6000612997601c8361308a565b91506129a2826134d9565b602082019050919050565b60006129ba60128361308a565b91506129c582613502565b602082019050919050565b60006129dd60248361308a565b91506129e88261352b565b604082019050919050565b6000612a0060198361308a565b9150612a0b8261357a565b602082019050919050565b6000612a23602c8361308a565b9150612a2e826135a3565b604082019050919050565b6000612a4660388361308a565b9150612a51826135f2565b604082019050919050565b6000612a69602a8361308a565b9150612a7482613641565b604082019050919050565b6000612a8c60298361308a565b9150612a9782613690565b604082019050919050565b6000612aaf60168361308a565b9150612aba826136df565b602082019050919050565b6000612ad260208361308a565b9150612add82613708565b602082019050919050565b6000612af5602c8361308a565b9150612b0082613731565b604082019050919050565b6000612b1860298361308a565b9150612b2382613780565b604082019050919050565b6000612b3b602f8361308a565b9150612b46826137cf565b604082019050919050565b6000612b5e60218361308a565b9150612b698261381e565b604082019050919050565b6000612b8160008361307f565b9150612b8c8261386d565b600082019050919050565b6000612ba460318361308a565b9150612baf82613870565b604082019050919050565b6000612bc760178361309b565b9150612bd2826138bf565b601782019050919050565b6000612bea60158361308a565b9150612bf5826138e8565b602082019050919050565b6000612c0d60118361309b565b9150612c1882613911565b601182019050919050565b6000612c30602f8361308a565b9150612c3b8261393a565b604082019050919050565b612c4f81613241565b82525050565b6000612c618285612913565b9150612c6d8284612913565b91508190509392505050565b6000612c8482612b74565b9150819050919050565b6000612c9982612bba565b9150612ca58285612913565b9150612cb082612c00565b9150612cbc8284612913565b91508190509392505050565b6000602082019050612cdd6000830184612874565b92915050565b6000608082019050612cf86000830187612874565b612d056020830186612874565b612d126040830185612c46565b8181036060830152612d2481846128a1565b905095945050505050565b6000602082019050612d446000830184612883565b92915050565b6000602082019050612d5f6000830184612892565b92915050565b60006020820190508181036000830152612d7f81846128da565b905092915050565b60006020820190508181036000830152612da081612944565b9050919050565b60006020820190508181036000830152612dc081612967565b9050919050565b60006020820190508181036000830152612de08161298a565b9050919050565b60006020820190508181036000830152612e00816129ad565b9050919050565b60006020820190508181036000830152612e20816129d0565b9050919050565b60006020820190508181036000830152612e40816129f3565b9050919050565b60006020820190508181036000830152612e6081612a16565b9050919050565b60006020820190508181036000830152612e8081612a39565b9050919050565b60006020820190508181036000830152612ea081612a5c565b9050919050565b60006020820190508181036000830152612ec081612a7f565b9050919050565b60006020820190508181036000830152612ee081612aa2565b9050919050565b60006020820190508181036000830152612f0081612ac5565b9050919050565b60006020820190508181036000830152612f2081612ae8565b9050919050565b60006020820190508181036000830152612f4081612b0b565b9050919050565b60006020820190508181036000830152612f6081612b2e565b9050919050565b60006020820190508181036000830152612f8081612b51565b9050919050565b60006020820190508181036000830152612fa081612b97565b9050919050565b60006020820190508181036000830152612fc081612bdd565b9050919050565b60006020820190508181036000830152612fe081612c23565b9050919050565b6000602082019050612ffc6000830184612c46565b92915050565b600061300c61301d565b905061301882826132e9565b919050565b6000604051905090565b600067ffffffffffffffff82111561304257613041613421565b5b61304b82613450565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006130b182613241565b91506130bc83613241565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156130f1576130f0613394565b5b828201905092915050565b600061310782613241565b915061311283613241565b925082613122576131216133c3565b5b828204905092915050565b600061313882613241565b915061314383613241565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561317c5761317b613394565b5b828202905092915050565b600061319282613241565b915061319d83613241565b9250828210156131b0576131af613394565b5b828203905092915050565b60006131c682613221565b9050919050565b60006131d882613221565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561327857808201518184015260208101905061325d565b83811115613287576000848401525b50505050565b600061329882613241565b915060008214156132ac576132ab613394565b5b600182039050919050565b600060028204905060018216806132cf57607f821691505b602082108114156132e3576132e26133f2565b5b50919050565b6132f282613450565b810181811067ffffffffffffffff8211171561331157613310613421565b5b80604052505050565b600061332582613241565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561335857613357613394565b5b600182019050919050565b600061336e82613241565b915061337983613241565b925082613389576133886133c3565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f524f4c455f41444d494e206e65656465642e0000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4e6f7420656e6f756768206d6f6e65792073656e742e00000000000000000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b50565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f4661696c656420746f2073656e642045746865722e0000000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b613992816131bb565b811461399d57600080fd5b50565b6139a9816131cd565b81146139b457600080fd5b50565b6139c0816131df565b81146139cb57600080fd5b50565b6139d7816131eb565b81146139e257600080fd5b50565b6139ee816131f5565b81146139f957600080fd5b50565b613a0581613241565b8114613a1057600080fd5b5056fea264697066735822122026e30483e939fc4fb34a824c75b1b90758e155640fe74cecf6fea62c93d7edda64736f6c63430008010033",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c80637e40be66116100f7578063b88d4fde11610095578063d391014b11610064578063d391014b1461065a578063d459643b14610685578063d547741f146106b0578063e985e9c5146106d9576101c2565b8063b88d4fde146105ad578063c57273c2146105d6578063c7d959a8146105f2578063c87b56dd1461061d576101c2565b806395d89b41116100d157806395d89b4114610505578063a217fddf14610530578063a22cb4651461055b578063a9059cbb14610584576101c2565b80637e40be661461047457806391d148541461049f578063940a3f88146104dc576101c2565b8063248a9ca31161016457806338a80b7f1161013e57806338a80b7f146103a657806342842e0e146103d15780636352211e146103fa57806370a0823114610437576101c2565b8063248a9ca3146103175780632f2ff15d1461035457806336568abe1461037d576101c2565b8063081812fc116101a0578063081812fc1461025f578063095ea7b31461029c578063143858cc146102c557806323b872dd146102ee576101c2565b806301ffc9a7146101c7578063061c0d761461020457806306fdde0314610234575b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e991906127f9565b610716565b6040516101fb9190612d2f565b60405180910390f35b61021e6004803603810190610219919061276b565b610728565b60405161022b9190612fe7565b60405180910390f35b34801561024057600080fd5b5061024961075e565b6040516102569190612d65565b60405180910390f35b34801561026b57600080fd5b506102866004803603810190610281919061284b565b6107f0565b6040516102939190612cc8565b60405180910390f35b3480156102a857600080fd5b506102c360048036038101906102be919061272f565b610875565b005b3480156102d157600080fd5b506102ec60048036038101906102e7919061284b565b61098d565b005b3480156102fa57600080fd5b5061031560048036038101906103109190612629565b6109da565b005b34801561032357600080fd5b5061033e60048036038101906103399190612794565b610a3a565b60405161034b9190612d4a565b60405180910390f35b34801561036057600080fd5b5061037b600480360381019061037691906127bd565b610a5a565b005b34801561038957600080fd5b506103a4600480360381019061039f91906127bd565b610a83565b005b3480156103b257600080fd5b506103bb610b06565b6040516103c89190612fe7565b60405180910390f35b3480156103dd57600080fd5b506103f860048036038101906103f39190612629565b610b10565b005b34801561040657600080fd5b50610421600480360381019061041c919061284b565b610b30565b60405161042e9190612cc8565b60405180910390f35b34801561044357600080fd5b5061045e60048036038101906104599190612588565b610be2565b60405161046b9190612fe7565b60405180910390f35b34801561048057600080fd5b50610489610c9a565b6040516104969190612fe7565b60405180910390f35b3480156104ab57600080fd5b506104c660048036038101906104c191906127bd565b610ca0565b6040516104d39190612d2f565b60405180910390f35b3480156104e857600080fd5b5061050360048036038101906104fe919061284b565b610d0b565b005b34801561051157600080fd5b5061051a610dc1565b6040516105279190612d65565b60405180910390f35b34801561053c57600080fd5b50610545610e53565b6040516105529190612d4a565b60405180910390f35b34801561056757600080fd5b50610582600480360381019061057d91906126f3565b610e5a565b005b34801561059057600080fd5b506105ab60048036038101906105a691906125b1565b610e70565b005b3480156105b957600080fd5b506105d460048036038101906105cf9190612678565b610f21565b005b6105f060048036038101906105eb919061276b565b610f83565b005b3480156105fe57600080fd5b50610607611040565b6040516106149190612fe7565b60405180910390f35b34801561062957600080fd5b50610644600480360381019061063f919061284b565b61104a565b6040516106519190612d65565b60405180910390f35b34801561066657600080fd5b5061066f6110f1565b60405161067c9190612d4a565b60405180910390f35b34801561069157600080fd5b5061069a611115565b6040516106a79190612fe7565b60405180910390f35b3480156106bc57600080fd5b506106d760048036038101906106d291906127bd565b61111b565b005b3480156106e557600080fd5b5061070060048036038101906106fb91906125ed565b611144565b60405161070d9190612d2f565b60405180910390f35b6000610721826111fc565b9050919050565b600061073382610f83565b61073d60076111d8565b600061074960076111ee565b90506107553382611276565b80915050919050565b60606000805461076d906132b7565b80601f0160208091040260200160405190810160405280929190818152602001828054610799906132b7565b80156107e65780601f106107bb576101008083540402835291602001916107e6565b820191906000526020600020905b8154815290600101906020018083116107c957829003601f168201915b5050505050905090565b60006107fb82611444565b61083a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083190612f07565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061088082610b30565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e890612f67565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166109106114b0565b73ffffffffffffffffffffffffffffffffffffffff16148061093f575061093e816109396114b0565b611144565b5b61097e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097590612e67565b60405180910390fd5b61098883836114b8565b505050565b6000600854905081600881905550806008547fcb45514fc0fe5d5f647eb2d722a16b3a79b15621154705e599c288dbf0239077336040516109ce9190612cc8565b60405180910390a35050565b6109eb6109e56114b0565b82611571565b610a2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2190612f87565b60405180910390fd5b610a3583838361164f565b505050565b600060066000838152602001908152602001600020600101549050919050565b610a6382610a3a565b610a7481610a6f6114b0565b6118ab565b610a7e8383611948565b505050565b610a8b6114b0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610af8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aef90612fc7565b60405180910390fd5b610b028282611a29565b5050565b6000600854905090565b610b2b83838360405180602001604052806000815250610f21565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610bd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd090612ea7565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4a90612e87565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60085481565b60006006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610d357f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca02509633610ca0565b610d74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6b90612de7565b60405180910390fd5b6000600954905081600981905550806009547ffcf6fe54a7e3d0e1e9928c58aaf4a9a2b757e783323259a757c7486bb6f0035733604051610db59190612cc8565b60405180910390a35050565b606060018054610dd0906132b7565b80601f0160208091040260200160405190810160405280929190818152602001828054610dfc906132b7565b8015610e495780601f10610e1e57610100808354040283529160200191610e49565b820191906000526020600020905b815481529060010190602001808311610e2c57829003601f168201915b5050505050905090565b6000801b81565b610e6c610e656114b0565b8383611b0b565b5050565b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610e9690612c79565b60006040518083038185875af1925050503d8060008114610ed3576040519150601f19603f3d011682016040523d82523d6000602084013e610ed8565b606091505b5050905080610f1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1390612fa7565b60405180910390fd5b505050565b610f32610f2c6114b0565b83611571565b610f71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6890612f87565b60405180910390fd5b610f7d84848484611c78565b50505050565b8015610ff757610fb37f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca02509633610ca0565b610ff2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe990612de7565b60405180910390fd5b61103d565b60085434101561103c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103390612ec7565b60405180910390fd5b5b50565b6000600954905090565b606061105582611444565b611094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108b90612f47565b60405180910390fd5b600061109e611cd4565b905060008151116110be57604051806020016040528060008152506110e9565b806110c884611ceb565b6040516020016110d9929190612c55565b6040516020818303038152906040525b915050919050565b7f2172861495e7b85edac73e3cd5fbb42dd675baadf627720e687bcfdaca02509681565b60095481565b61112482610a3a565b611135816111306114b0565b6118ab565b61113f8383611a29565b505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6001816000016000828254019250508190555050565b600081600001549050919050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061126f575061126e82611e98565b5b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156112e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112dd90612ee7565b60405180910390fd5b6112ef81611444565b1561132f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132690612dc7565b60405180910390fd5b61133b60008383611f7a565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461138b91906130a6565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661152b83610b30565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061157c82611444565b6115bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b290612e47565b60405180910390fd5b60006115c683610b30565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061163557508373ffffffffffffffffffffffffffffffffffffffff1661161d846107f0565b73ffffffffffffffffffffffffffffffffffffffff16145b8061164657506116458185611144565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661166f82610b30565b73ffffffffffffffffffffffffffffffffffffffff16146116c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116bc90612f27565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172c90612e07565b60405180910390fd5b611740838383611f7a565b61174b6000826114b8565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461179b9190613187565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117f291906130a6565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6118b58282610ca0565b611944576118da8173ffffffffffffffffffffffffffffffffffffffff166014611f7f565b6118e88360001c6020611f7f565b6040516020016118f9929190612c8e565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193b9190612d65565b60405180910390fd5b5050565b6119528282610ca0565b611a255760016006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506119ca6114b0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611a338282610ca0565b15611b075760006006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611aac6114b0565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611b7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7190612e27565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611c6b9190612d2f565b60405180910390a3505050565b611c8384848461164f565b611c8f84848484612279565b611cce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc590612da7565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000821415611d33576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611e93565b600082905060005b60008214611d65578080611d4e9061331a565b915050600a82611d5e91906130fc565b9150611d3b565b60008167ffffffffffffffff811115611da7577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611dd95781602001600182028036833780820191505090505b5090505b60008514611e8c57600182611df29190613187565b9150600a85611e019190613363565b6030611e0d91906130a6565b60f81b818381518110611e49577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611e8591906130fc565b9450611ddd565b8093505050505b919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611f6357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611f735750611f7282612410565b5b9050919050565b505050565b606060006002836002611f92919061312d565b611f9c91906130a6565b67ffffffffffffffff811115611fdb577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561200d5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061206b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106120f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612135919061312d565b61213f91906130a6565b90505b600181111561222b577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106121a7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8282815181106121e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806122249061328d565b9050612142565b506000841461226f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226690612d87565b60405180910390fd5b8091505092915050565b600061229a8473ffffffffffffffffffffffffffffffffffffffff1661247a565b15612403578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026122c36114b0565b8786866040518563ffffffff1660e01b81526004016122e59493929190612ce3565b602060405180830381600087803b1580156122ff57600080fd5b505af192505050801561233057506040513d601f19601f8201168201806040525081019061232d9190612822565b60015b6123b3573d8060008114612360576040519150601f19603f3d011682016040523d82523d6000602084013e612365565b606091505b506000815114156123ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a290612da7565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612408565b600190505b949350505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080823b905060008111915050919050565b60006124a061249b84613027565b613002565b9050828152602081018484840111156124b857600080fd5b6124c384828561324b565b509392505050565b6000813590506124da81613989565b92915050565b6000813590506124ef816139a0565b92915050565b600081359050612504816139b7565b92915050565b600081359050612519816139ce565b92915050565b60008135905061252e816139e5565b92915050565b600081519050612543816139e5565b92915050565b600082601f83011261255a57600080fd5b813561256a84826020860161248d565b91505092915050565b600081359050612582816139fc565b92915050565b60006020828403121561259a57600080fd5b60006125a8848285016124cb565b91505092915050565b600080604083850312156125c457600080fd5b60006125d2858286016124e0565b92505060206125e385828601612573565b9150509250929050565b6000806040838503121561260057600080fd5b600061260e858286016124cb565b925050602061261f858286016124cb565b9150509250929050565b60008060006060848603121561263e57600080fd5b600061264c868287016124cb565b935050602061265d868287016124cb565b925050604061266e86828701612573565b9150509250925092565b6000806000806080858703121561268e57600080fd5b600061269c878288016124cb565b94505060206126ad878288016124cb565b93505060406126be87828801612573565b925050606085013567ffffffffffffffff8111156126db57600080fd5b6126e787828801612549565b91505092959194509250565b6000806040838503121561270657600080fd5b6000612714858286016124cb565b9250506020612725858286016124f5565b9150509250929050565b6000806040838503121561274257600080fd5b6000612750858286016124cb565b925050602061276185828601612573565b9150509250929050565b60006020828403121561277d57600080fd5b600061278b848285016124f5565b91505092915050565b6000602082840312156127a657600080fd5b60006127b48482850161250a565b91505092915050565b600080604083850312156127d057600080fd5b60006127de8582860161250a565b92505060206127ef858286016124cb565b9150509250929050565b60006020828403121561280b57600080fd5b60006128198482850161251f565b91505092915050565b60006020828403121561283457600080fd5b600061284284828501612534565b91505092915050565b60006020828403121561285d57600080fd5b600061286b84828501612573565b91505092915050565b61287d816131bb565b82525050565b61288c816131df565b82525050565b61289b816131eb565b82525050565b60006128ac82613058565b6128b6818561306e565b93506128c681856020860161325a565b6128cf81613450565b840191505092915050565b60006128e582613063565b6128ef818561308a565b93506128ff81856020860161325a565b61290881613450565b840191505092915050565b600061291e82613063565b612928818561309b565b935061293881856020860161325a565b80840191505092915050565b600061295160208361308a565b915061295c82613461565b602082019050919050565b600061297460328361308a565b915061297f8261348a565b604082019050919050565b6000612997601c8361308a565b91506129a2826134d9565b602082019050919050565b60006129ba60128361308a565b91506129c582613502565b602082019050919050565b60006129dd60248361308a565b91506129e88261352b565b604082019050919050565b6000612a0060198361308a565b9150612a0b8261357a565b602082019050919050565b6000612a23602c8361308a565b9150612a2e826135a3565b604082019050919050565b6000612a4660388361308a565b9150612a51826135f2565b604082019050919050565b6000612a69602a8361308a565b9150612a7482613641565b604082019050919050565b6000612a8c60298361308a565b9150612a9782613690565b604082019050919050565b6000612aaf60168361308a565b9150612aba826136df565b602082019050919050565b6000612ad260208361308a565b9150612add82613708565b602082019050919050565b6000612af5602c8361308a565b9150612b0082613731565b604082019050919050565b6000612b1860298361308a565b9150612b2382613780565b604082019050919050565b6000612b3b602f8361308a565b9150612b46826137cf565b604082019050919050565b6000612b5e60218361308a565b9150612b698261381e565b604082019050919050565b6000612b8160008361307f565b9150612b8c8261386d565b600082019050919050565b6000612ba460318361308a565b9150612baf82613870565b604082019050919050565b6000612bc760178361309b565b9150612bd2826138bf565b601782019050919050565b6000612bea60158361308a565b9150612bf5826138e8565b602082019050919050565b6000612c0d60118361309b565b9150612c1882613911565b601182019050919050565b6000612c30602f8361308a565b9150612c3b8261393a565b604082019050919050565b612c4f81613241565b82525050565b6000612c618285612913565b9150612c6d8284612913565b91508190509392505050565b6000612c8482612b74565b9150819050919050565b6000612c9982612bba565b9150612ca58285612913565b9150612cb082612c00565b9150612cbc8284612913565b91508190509392505050565b6000602082019050612cdd6000830184612874565b92915050565b6000608082019050612cf86000830187612874565b612d056020830186612874565b612d126040830185612c46565b8181036060830152612d2481846128a1565b905095945050505050565b6000602082019050612d446000830184612883565b92915050565b6000602082019050612d5f6000830184612892565b92915050565b60006020820190508181036000830152612d7f81846128da565b905092915050565b60006020820190508181036000830152612da081612944565b9050919050565b60006020820190508181036000830152612dc081612967565b9050919050565b60006020820190508181036000830152612de08161298a565b9050919050565b60006020820190508181036000830152612e00816129ad565b9050919050565b60006020820190508181036000830152612e20816129d0565b9050919050565b60006020820190508181036000830152612e40816129f3565b9050919050565b60006020820190508181036000830152612e6081612a16565b9050919050565b60006020820190508181036000830152612e8081612a39565b9050919050565b60006020820190508181036000830152612ea081612a5c565b9050919050565b60006020820190508181036000830152612ec081612a7f565b9050919050565b60006020820190508181036000830152612ee081612aa2565b9050919050565b60006020820190508181036000830152612f0081612ac5565b9050919050565b60006020820190508181036000830152612f2081612ae8565b9050919050565b60006020820190508181036000830152612f4081612b0b565b9050919050565b60006020820190508181036000830152612f6081612b2e565b9050919050565b60006020820190508181036000830152612f8081612b51565b9050919050565b60006020820190508181036000830152612fa081612b97565b9050919050565b60006020820190508181036000830152612fc081612bdd565b9050919050565b60006020820190508181036000830152612fe081612c23565b9050919050565b6000602082019050612ffc6000830184612c46565b92915050565b600061300c61301d565b905061301882826132e9565b919050565b6000604051905090565b600067ffffffffffffffff82111561304257613041613421565b5b61304b82613450565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006130b182613241565b91506130bc83613241565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156130f1576130f0613394565b5b828201905092915050565b600061310782613241565b915061311283613241565b925082613122576131216133c3565b5b828204905092915050565b600061313882613241565b915061314383613241565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561317c5761317b613394565b5b828202905092915050565b600061319282613241565b915061319d83613241565b9250828210156131b0576131af613394565b5b828203905092915050565b60006131c682613221565b9050919050565b60006131d882613221565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561327857808201518184015260208101905061325d565b83811115613287576000848401525b50505050565b600061329882613241565b915060008214156132ac576132ab613394565b5b600182039050919050565b600060028204905060018216806132cf57607f821691505b602082108114156132e3576132e26133f2565b5b50919050565b6132f282613450565b810181811067ffffffffffffffff8211171561331157613310613421565b5b80604052505050565b600061332582613241565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561335857613357613394565b5b600182019050919050565b600061336e82613241565b915061337983613241565b925082613389576133886133c3565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f524f4c455f41444d494e206e65656465642e0000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4e6f7420656e6f756768206d6f6e65792073656e742e00000000000000000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b50565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f4661696c656420746f2073656e642045746865722e0000000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b613992816131bb565b811461399d57600080fd5b50565b6139a9816131cd565b81146139b457600080fd5b50565b6139c0816131df565b81146139cb57600080fd5b50565b6139d7816131eb565b81146139e257600080fd5b50565b6139ee816131f5565b81146139f957600080fd5b50565b613a0581613241565b8114613a1057600080fd5b5056fea264697066735822122026e30483e939fc4fb34a824c75b1b90758e155640fe74cecf6fea62c93d7edda64736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "buyTicket(bool)": {
        "params": {
          "reserved": "Bypass the payment when buying, msg.sender needs ROLE_ADMIN."
        }
      },
      "deposit(bool)": {
        "params": {
          "reserved": "Bypass the payment when buying."
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "ticketPriceChanged(uint256,uint256,address)": {
        "notice": "Emitted when _ticketPrice is set."
      },
      "transferDeadlineChanged(uint256,uint256,address)": {
        "notice": "Emitted when _transferDeadline is set."
      }
    },
    "kind": "user",
    "methods": {
      "ROLE_ADMIN()": {
        "notice": "Admin tasks : - buy ticket without depositing ether (paying) - change _ticketPrice - change _transferDeadline"
      },
      "_ticketPrice()": {
        "notice": "Price of a ticket"
      },
      "_transferDeadline()": {
        "notice": "Transferring ticket after this date is restricted to admin."
      },
      "buyTicket(bool)": {
        "notice": "Function to transfer Ether from this contract to address from input."
      },
      "deposit(bool)": {
        "notice": "Function to deposit Ether into this contract."
      },
      "get_ticketPrice()": {
        "notice": "Returns _ticketPrice."
      },
      "get_transferDeadline()": {
        "notice": "Returns _transferDeadline."
      },
      "set_ticketPrice(uint256)": {
        "notice": "Sets _ticketPrice.Callable only by high roles"
      },
      "set_transferDeadline(uint256)": {
        "notice": "Sets _transferDeadline.Callable only by high roles"
      },
      "supportsInterface(bytes4)": {
        "notice": "https://forum.openzeppelin.com/t/derived-contract-must-override-function-supportsinterface/6315/2override supportsInterface from ERC721 and AccessControl"
      },
      "transfer(address,uint256)": {
        "notice": "Function to transfer Ether from this contract to address from input. Callable only by high roles"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 407,
        "contract": "contracts/TicketOffice1.sol:TicketOffice1",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 409,
        "contract": "contracts/TicketOffice1.sol:TicketOffice1",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 413,
        "contract": "contracts/TicketOffice1.sol:TicketOffice1",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 417,
        "contract": "contracts/TicketOffice1.sol:TicketOffice1",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 421,
        "contract": "contracts/TicketOffice1.sol:TicketOffice1",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 427,
        "contract": "contracts/TicketOffice1.sol:TicketOffice1",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 24,
        "contract": "contracts/TicketOffice1.sol:TicketOffice1",
        "label": "_roles",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 2021,
        "contract": "contracts/TicketOffice1.sol:TicketOffice1",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)1698_storage"
      },
      {
        "astId": 2030,
        "contract": "contracts/TicketOffice1.sol:TicketOffice1",
        "label": "_ticketPrice",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2033,
        "contract": "contracts/TicketOffice1.sol:TicketOffice1",
        "label": "_transferDeadline",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1698_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1697,
            "contract": "contracts/TicketOffice1.sol:TicketOffice1",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/TicketOffice1.sol:TicketOffice1",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/TicketOffice1.sol:TicketOffice1",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}